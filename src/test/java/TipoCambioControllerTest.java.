package com.example.demo.controller;

import com.example.demo.model.Solicitud;
import com.example.demo.service.TipoCambioSoapService;
import com.example.demo.repository.SolicitudRepository;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.List;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(TipoCambioController.class)
public class TipoCambioControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private TipoCambioSoapService tipoCambioSoapService;

    @MockBean
    private SolicitudRepository solicitudRepository;

    @Test
    public void testObtenerTipoCambioDia() throws Exception {
        // Mock del servicio
        String mockResponse = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><TipoCambioDiaResponse><TipoCambioDiaResult><CambioDolar><VarDolar><fecha>2024-11-15</fecha><referencia>7.85</referencia></VarDolar></CambioDolar></TipoCambioDiaResult></TipoCambioDiaResponse></soap:Body></soap:Envelope>";
        Mockito.when(tipoCambioSoapService.obtenerTipoCambioDia()).thenReturn(mockResponse);

        // Ejecutar el endpoint y validar la respuesta
        mockMvc.perform(get("/tipoCambioDia")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.fecha").value("2024-11-15"))
                .andExpect(jsonPath("$.referencia").value(7.85));
    }

    @Test
    public void testObtenerHistorial() throws Exception {
        // Mock del repositorio
        Solicitud solicitud1 = new Solicitud();
        solicitud1.setId(1L);
        solicitud1.setNumeroSolicitud("1234");
        solicitud1.setFecha("2024-11-15");
        solicitud1.setReferencia(7.85);

        Solicitud solicitud2 = new Solicitud();
        solicitud2.setId(2L);
        solicitud2.setNumeroSolicitud("5678");
        solicitud2.setFecha("2024-11-14");
        solicitud2.setReferencia(7.84);

        List<Solicitud> mockHistorial = Arrays.asList(solicitud1, solicitud2);
        Mockito.when(solicitudRepository.findAll()).thenReturn(mockHistorial);

        // Ejecutar el endpoint y validar la respuesta
        mockMvc.perform(get("/historial")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].numeroSolicitud").value("1234"))
                .andExpect(jsonPath("$[0].referencia").value(7.85))
                .andExpect(jsonPath("$[1].numeroSolicitud").value("5678"))
                .andExpect(jsonPath("$[1].referencia").value(7.84));
    }
}